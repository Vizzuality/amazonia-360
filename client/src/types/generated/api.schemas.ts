/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * AmazoniaForever360 API
 * OpenAPI spec version: 0.1.0
 */
export type ReadTableGridTablePostBodyItem = CategoricalFilter | NumericalFilter;

export type ReadTableGridTablePostParams = {
  /**
   * Tile level at which the query will be computed
   */
  level: number;
  /**
   * Number of records.
   */
  limit?: number;
  /**
   * Prepend '-' to column name to make it descending
   */
  order_by: string[];
};

export type GridTileGridTileTileIndexGetParams = {
  /**
   * Colum/s to include in the tile. If empty, it returns only cell indexes.
   */
  columns?: string[];
};

export type TilejsonTilejsonJsonGetColormapName =
  (typeof TilejsonTilejsonJsonGetColormapName)[keyof typeof TilejsonTilejsonJsonGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTilejsonJsonGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TilejsonTilejsonJsonGetAlgorithm =
  (typeof TilejsonTilejsonJsonGetAlgorithm)[keyof typeof TilejsonTilejsonJsonGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTilejsonJsonGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TilejsonTilejsonJsonGetReproject =
  (typeof TilejsonTilejsonJsonGetReproject)[keyof typeof TilejsonTilejsonJsonGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTilejsonJsonGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TilejsonTilejsonJsonGetResampling =
  (typeof TilejsonTilejsonJsonGetResampling)[keyof typeof TilejsonTilejsonJsonGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTilejsonJsonGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TilejsonTilejsonJsonGetTileMatrixSetId =
  (typeof TilejsonTilejsonJsonGetTileMatrixSetId)[keyof typeof TilejsonTilejsonJsonGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTilejsonJsonGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TilejsonTilejsonJsonGetParams = {
  tileMatrixSetId?: TilejsonTilejsonJsonGetTileMatrixSetId;
  /**
   * Default will be automatically defined if the output image needs a mask (png) or not (jpeg).
   */
  tile_format?: ImageType | null;
  /**
   * Tile size scale. 1=256x256, 2=512x512...
   */
  tile_scale?: number;
  /**
   * Overwrite default minzoom.
   */
  minzoom?: number | null;
  /**
   * Overwrite default maxzoom.
   */
  maxzoom?: number | null;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TilejsonTilejsonJsonGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TilejsonTilejsonJsonGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TilejsonTilejsonJsonGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TilejsonTilejsonJsonGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TilejsonTileMatrixSetIdTilejsonJsonGetColormapName =
  (typeof TilejsonTileMatrixSetIdTilejsonJsonGetColormapName)[keyof typeof TilejsonTileMatrixSetIdTilejsonJsonGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTileMatrixSetIdTilejsonJsonGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TilejsonTileMatrixSetIdTilejsonJsonGetAlgorithm =
  (typeof TilejsonTileMatrixSetIdTilejsonJsonGetAlgorithm)[keyof typeof TilejsonTileMatrixSetIdTilejsonJsonGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTileMatrixSetIdTilejsonJsonGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TilejsonTileMatrixSetIdTilejsonJsonGetReproject =
  (typeof TilejsonTileMatrixSetIdTilejsonJsonGetReproject)[keyof typeof TilejsonTileMatrixSetIdTilejsonJsonGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTileMatrixSetIdTilejsonJsonGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TilejsonTileMatrixSetIdTilejsonJsonGetResampling =
  (typeof TilejsonTileMatrixSetIdTilejsonJsonGetResampling)[keyof typeof TilejsonTileMatrixSetIdTilejsonJsonGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TilejsonTileMatrixSetIdTilejsonJsonGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TilejsonTileMatrixSetIdTilejsonJsonGetParams = {
  /**
   * Default will be automatically defined if the output image needs a mask (png) or not (jpeg).
   */
  tile_format?: ImageType | null;
  /**
   * Tile size scale. 1=256x256, 2=512x512...
   */
  tile_scale?: number;
  /**
   * Overwrite default minzoom.
   */
  minzoom?: number | null;
  /**
   * Overwrite default maxzoom.
   */
  maxzoom?: number | null;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TilejsonTileMatrixSetIdTilejsonJsonGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TilejsonTileMatrixSetIdTilejsonJsonGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TilejsonTileMatrixSetIdTilejsonJsonGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TilejsonTileMatrixSetIdTilejsonJsonGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesZXYGetColormapName =
  (typeof TileTilesZXYGetColormapName)[keyof typeof TileTilesZXYGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesZXYGetAlgorithm =
  (typeof TileTilesZXYGetAlgorithm)[keyof typeof TileTilesZXYGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesZXYGetReproject =
  (typeof TileTilesZXYGetReproject)[keyof typeof TileTilesZXYGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesZXYGetResampling =
  (typeof TileTilesZXYGetResampling)[keyof typeof TileTilesZXYGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesZXYGetTileMatrixSetId =
  (typeof TileTilesZXYGetTileMatrixSetId)[keyof typeof TileTilesZXYGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilesZXYGetParams = {
  tileMatrixSetId?: TileTilesZXYGetTileMatrixSetId;
  scale?: number;
  format?: ImageType;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesZXYGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesZXYGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesZXYGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesZXYGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesZXYFormatGetColormapName =
  (typeof TileTilesZXYFormatGetColormapName)[keyof typeof TileTilesZXYFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYFormatGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesZXYFormatGetAlgorithm =
  (typeof TileTilesZXYFormatGetAlgorithm)[keyof typeof TileTilesZXYFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesZXYFormatGetReproject =
  (typeof TileTilesZXYFormatGetReproject)[keyof typeof TileTilesZXYFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesZXYFormatGetResampling =
  (typeof TileTilesZXYFormatGetResampling)[keyof typeof TileTilesZXYFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesZXYFormatGetTileMatrixSetId =
  (typeof TileTilesZXYFormatGetTileMatrixSetId)[keyof typeof TileTilesZXYFormatGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYFormatGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilesZXYFormatGetParams = {
  tileMatrixSetId?: TileTilesZXYFormatGetTileMatrixSetId;
  scale?: number;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesZXYFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesZXYFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesZXYFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesZXYFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesZXYScaleXGetColormapName =
  (typeof TileTilesZXYScaleXGetColormapName)[keyof typeof TileTilesZXYScaleXGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesZXYScaleXGetAlgorithm =
  (typeof TileTilesZXYScaleXGetAlgorithm)[keyof typeof TileTilesZXYScaleXGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesZXYScaleXGetReproject =
  (typeof TileTilesZXYScaleXGetReproject)[keyof typeof TileTilesZXYScaleXGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesZXYScaleXGetResampling =
  (typeof TileTilesZXYScaleXGetResampling)[keyof typeof TileTilesZXYScaleXGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesZXYScaleXGetTileMatrixSetId =
  (typeof TileTilesZXYScaleXGetTileMatrixSetId)[keyof typeof TileTilesZXYScaleXGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilesZXYScaleXGetParams = {
  tileMatrixSetId?: TileTilesZXYScaleXGetTileMatrixSetId;
  format?: ImageType;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesZXYScaleXGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesZXYScaleXGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesZXYScaleXGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesZXYScaleXGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesZXYScaleXFormatGetColormapName =
  (typeof TileTilesZXYScaleXFormatGetColormapName)[keyof typeof TileTilesZXYScaleXFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXFormatGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesZXYScaleXFormatGetAlgorithm =
  (typeof TileTilesZXYScaleXFormatGetAlgorithm)[keyof typeof TileTilesZXYScaleXFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesZXYScaleXFormatGetReproject =
  (typeof TileTilesZXYScaleXFormatGetReproject)[keyof typeof TileTilesZXYScaleXFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesZXYScaleXFormatGetResampling =
  (typeof TileTilesZXYScaleXFormatGetResampling)[keyof typeof TileTilesZXYScaleXFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesZXYScaleXFormatGetTileMatrixSetId =
  (typeof TileTilesZXYScaleXFormatGetTileMatrixSetId)[keyof typeof TileTilesZXYScaleXFormatGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesZXYScaleXFormatGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilesZXYScaleXFormatGetParams = {
  tileMatrixSetId?: TileTilesZXYScaleXFormatGetTileMatrixSetId;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesZXYScaleXFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesZXYScaleXFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesZXYScaleXFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesZXYScaleXFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesTileMatrixSetIdZXYGetColormapName =
  (typeof TileTilesTileMatrixSetIdZXYGetColormapName)[keyof typeof TileTilesTileMatrixSetIdZXYGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesTileMatrixSetIdZXYGetAlgorithm =
  (typeof TileTilesTileMatrixSetIdZXYGetAlgorithm)[keyof typeof TileTilesTileMatrixSetIdZXYGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesTileMatrixSetIdZXYGetReproject =
  (typeof TileTilesTileMatrixSetIdZXYGetReproject)[keyof typeof TileTilesTileMatrixSetIdZXYGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYGetResampling =
  (typeof TileTilesTileMatrixSetIdZXYGetResampling)[keyof typeof TileTilesTileMatrixSetIdZXYGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYGetParams = {
  scale?: number;
  format?: ImageType;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesTileMatrixSetIdZXYGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesTileMatrixSetIdZXYGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesTileMatrixSetIdZXYGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesTileMatrixSetIdZXYGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesTileMatrixSetIdZXYFormatGetColormapName =
  (typeof TileTilesTileMatrixSetIdZXYFormatGetColormapName)[keyof typeof TileTilesTileMatrixSetIdZXYFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYFormatGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesTileMatrixSetIdZXYFormatGetAlgorithm =
  (typeof TileTilesTileMatrixSetIdZXYFormatGetAlgorithm)[keyof typeof TileTilesTileMatrixSetIdZXYFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesTileMatrixSetIdZXYFormatGetReproject =
  (typeof TileTilesTileMatrixSetIdZXYFormatGetReproject)[keyof typeof TileTilesTileMatrixSetIdZXYFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYFormatGetResampling =
  (typeof TileTilesTileMatrixSetIdZXYFormatGetResampling)[keyof typeof TileTilesTileMatrixSetIdZXYFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYFormatGetParams = {
  scale?: number;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesTileMatrixSetIdZXYFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesTileMatrixSetIdZXYFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesTileMatrixSetIdZXYFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesTileMatrixSetIdZXYFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesTileMatrixSetIdZXYScaleXGetColormapName =
  (typeof TileTilesTileMatrixSetIdZXYScaleXGetColormapName)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXGetAlgorithm =
  (typeof TileTilesTileMatrixSetIdZXYScaleXGetAlgorithm)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXGetReproject =
  (typeof TileTilesTileMatrixSetIdZXYScaleXGetReproject)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXGetResampling =
  (typeof TileTilesTileMatrixSetIdZXYScaleXGetResampling)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXGetParams = {
  format?: ImageType;
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesTileMatrixSetIdZXYScaleXGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesTileMatrixSetIdZXYScaleXGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesTileMatrixSetIdZXYScaleXGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesTileMatrixSetIdZXYScaleXGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilesTileMatrixSetIdZXYScaleXFormatGetColormapName =
  (typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetColormapName)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXFormatGetColormapName = {
  matter_r: "matter_r",
  summer: "summer",
  flag_r: "flag_r",
  summer_r: "summer_r",
  puor_r: "puor_r",
  hot: "hot",
  deep_r: "deep_r",
  inferno_r: "inferno_r",
  pastel1: "pastel1",
  purd_r: "purd_r",
  accent_r: "accent_r",
  nipy_spectral: "nipy_spectral",
  magma: "magma",
  blues_r: "blues_r",
  delta: "delta",
  prism: "prism",
  gnuplot2: "gnuplot2",
  gnbu_r: "gnbu_r",
  magma_r: "magma_r",
  haline: "haline",
  bwr_r: "bwr_r",
  gist_earth_r: "gist_earth_r",
  flag: "flag",
  rdgy: "rdgy",
  dark2: "dark2",
  cubehelix_r: "cubehelix_r",
  gist_heat: "gist_heat",
  copper_r: "copper_r",
  set2: "set2",
  twilight_shifted: "twilight_shifted",
  spring_r: "spring_r",
  purples_r: "purples_r",
  wistia: "wistia",
  orrd: "orrd",
  puor: "puor",
  gist_gray_r: "gist_gray_r",
  spectral: "spectral",
  pink_r: "pink_r",
  ice_r: "ice_r",
  afmhot_r: "afmhot_r",
  haline_r: "haline_r",
  set3: "set3",
  wistia_r: "wistia_r",
  plasma_r: "plasma_r",
  tab10_r: "tab10_r",
  coolwarm_r: "coolwarm_r",
  turbid: "turbid",
  piyg: "piyg",
  gist_earth: "gist_earth",
  tempo_r: "tempo_r",
  paired_r: "paired_r",
  winter: "winter",
  gist_ncar_r: "gist_ncar_r",
  seismic: "seismic",
  inferno: "inferno",
  autumn_r: "autumn_r",
  oranges: "oranges",
  spectral_r: "spectral_r",
  jet_r: "jet_r",
  cool_r: "cool_r",
  gnuplot: "gnuplot",
  gnbu: "gnbu",
  pastel1_r: "pastel1_r",
  bupu: "bupu",
  binary: "binary",
  balance_r: "balance_r",
  ylgn_r: "ylgn_r",
  brbg: "brbg",
  prgn: "prgn",
  cividis_r: "cividis_r",
  pubugn_r: "pubugn_r",
  bupu_r: "bupu_r",
  cubehelix: "cubehelix",
  blues: "blues",
  balance: "balance",
  dense: "dense",
  rdylgn: "rdylgn",
  hot_r: "hot_r",
  pastel2_r: "pastel2_r",
  oxy_r: "oxy_r",
  dark2_r: "dark2_r",
  pubu: "pubu",
  tarn: "tarn",
  gist_rainbow: "gist_rainbow",
  rdpu: "rdpu",
  diff_r: "diff_r",
  cmrmap: "cmrmap",
  pubu_r: "pubu_r",
  gist_stern: "gist_stern",
  gnuplot2_r: "gnuplot2_r",
  pubugn: "pubugn",
  jet: "jet",
  rplumbo: "rplumbo",
  greys: "greys",
  tempo: "tempo",
  solar: "solar",
  rdbu_r: "rdbu_r",
  amp: "amp",
  twilight_r: "twilight_r",
  rain_r: "rain_r",
  spring: "spring",
  speed_r: "speed_r",
  matter: "matter",
  gist_yarg: "gist_yarg",
  viridis_r: "viridis_r",
  rdylgn_r: "rdylgn_r",
  rain: "rain",
  greys_r: "greys_r",
  thermal_r: "thermal_r",
  ocean: "ocean",
  prgn_r: "prgn_r",
  tab20c_r: "tab20c_r",
  gray: "gray",
  turbo_r: "turbo_r",
  rdpu_r: "rdpu_r",
  algae_r: "algae_r",
  bone: "bone",
  rainbow_r: "rainbow_r",
  ylgn: "ylgn",
  tab10: "tab10",
  reds: "reds",
  rdylbu_r: "rdylbu_r",
  terrain: "terrain",
  set2_r: "set2_r",
  cfastie: "cfastie",
  ylorrd_r: "ylorrd_r",
  oxy: "oxy",
  orrd_r: "orrd_r",
  purples: "purples",
  brg_r: "brg_r",
  topo_r: "topo_r",
  tab20_r: "tab20_r",
  ylorbr_r: "ylorbr_r",
  curl_r: "curl_r",
  brg: "brg",
  autumn: "autumn",
  cmrmap_r: "cmrmap_r",
  gist_rainbow_r: "gist_rainbow_r",
  ylgnbu: "ylgnbu",
  purd: "purd",
  piyg_r: "piyg_r",
  oranges_r: "oranges_r",
  tab20c: "tab20c",
  gist_stern_r: "gist_stern_r",
  cividis: "cividis",
  set1_r: "set1_r",
  ylorbr: "ylorbr",
  gist_gray: "gist_gray",
  ylorrd: "ylorrd",
  ice: "ice",
  amp_r: "amp_r",
  solar_r: "solar_r",
  set3_r: "set3_r",
  winter_r: "winter_r",
  gnuplot_r: "gnuplot_r",
  greens_r: "greens_r",
  turbid_r: "turbid_r",
  prism_r: "prism_r",
  schwarzwald: "schwarzwald",
  curl: "curl",
  tab20b_r: "tab20b_r",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  rdgy_r: "rdgy_r",
  rdylbu: "rdylbu",
  delta_r: "delta_r",
  topo: "topo",
  seismic_r: "seismic_r",
  ylgnbu_r: "ylgnbu_r",
  bone_r: "bone_r",
  gray_r: "gray_r",
  tarn_r: "tarn_r",
  greens: "greens",
  plasma: "plasma",
  twilight: "twilight",
  rdbu: "rdbu",
  tab20b: "tab20b",
  tab20: "tab20",
  gist_yarg_r: "gist_yarg_r",
  brbg_r: "brbg_r",
  ocean_r: "ocean_r",
  copper: "copper",
  reds_r: "reds_r",
  phase: "phase",
  pink: "pink",
  bugn: "bugn",
  algae: "algae",
  binary_r: "binary_r",
  nipy_spectral_r: "nipy_spectral_r",
  terrain_r: "terrain_r",
  afmhot: "afmhot",
  turbo: "turbo",
  pastel2: "pastel2",
  accent: "accent",
  cool: "cool",
  rainbow: "rainbow",
  dense_r: "dense_r",
  deep: "deep",
  speed: "speed",
  bwr: "bwr",
  set1: "set1",
  viridis: "viridis",
  hsv: "hsv",
  thermal: "thermal",
  paired: "paired",
  hsv_r: "hsv_r",
  coolwarm: "coolwarm",
  bugn_r: "bugn_r",
  twilight_shifted_r: "twilight_shifted_r",
  diff: "diff",
  phase_r: "phase_r",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm =
  (typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXFormatGetReproject =
  (typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetReproject)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXFormatGetResampling =
  (typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetResampling)[keyof typeof TileTilesTileMatrixSetIdZXYScaleXFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilesTileMatrixSetIdZXYScaleXFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilesTileMatrixSetIdZXYScaleXFormatGetParams = {
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilesTileMatrixSetIdZXYScaleXFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilesTileMatrixSetIdZXYScaleXFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilesTileMatrixSetIdZXYScaleXFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string | null;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

/**
 * GeoJSON Feature or FeatureCollection.
 */
export type ExactZonalStatsExactZonalStatsPostBody = FeatureCollection | Feature;

export type ExactZonalStatsExactZonalStatsPostParams = {
  /**
   * Statistics to compute. See `StatsProperties` for more details.
   */
  statistics?: StatsOps[];
  /**
   * Raster filename.
   */
  raster_filename: string;
};

export type PointPointLonLatGetReproject =
  (typeof PointPointLonLatGetReproject)[keyof typeof PointPointLonLatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointPointLonLatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type PointPointLonLatGetResampling =
  (typeof PointPointLonLatGetResampling)[keyof typeof PointPointLonLatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointPointLonLatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type PointPointLonLatGetParams = {
  /**
   * Raster filename.
   */
  raster_filename: string;
  /**
   * Coordinate Reference System of the input coords. Default to `epsg:4326`.
   */
  coord_crs?: string | null;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: number | number | string | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: PointPointLonLatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: PointPointLonLatGetReproject;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type TileJSONTemplate = string | null;

export type TileJSONScheme = (typeof TileJSONScheme)[keyof typeof TileJSONScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileJSONScheme = {
  xyz: "xyz",
  tms: "tms",
} as const;

export type TileJSONName = string | null;

export type TileJSONLegend = string | null;

export type TileJSONGrids = string[] | null;

export type TileJSONDescription = string | null;

export type TileJSONData = string[] | null;

export type TileJSONCenter = [number, number, number] | null;

export type TileJSONAttribution = string | null;

/**
 * TileJSON model.

Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
 */
export interface TileJSON {
  attribution?: TileJSONAttribution;
  bounds?: number[];
  center?: TileJSONCenter;
  data?: TileJSONData;
  description?: TileJSONDescription;
  grids?: TileJSONGrids;
  legend?: TileJSONLegend;
  /**
   * @minimum 0
   * @maximum 30
   */
  maxzoom?: number;
  /**
   * @minimum 0
   * @maximum 30
   */
  minzoom?: number;
  name?: TileJSONName;
  scheme?: TileJSONScheme;
  template?: TileJSONTemplate;
  tilejson?: string;
  tiles: string[];
  version?: string;
}

export type StatsPropertiesWeightsAnyOfItem = number | number;

/**
 * Array of weight values for each cell that intersects the polygon.
 */
export type StatsPropertiesWeights = StatsPropertiesWeightsAnyOfItem[] | null;

/**
 * Weighted version of variance.
 */
export type StatsPropertiesWeightedVariance = number | null;

/**
 * Sum of raster cells covered by the polygon, with each raster value weighted by its coverage fraction and weighting raster value.
 */
export type StatsPropertiesWeightedSum = number | null;

/**
 * Weighted version of stdev.
 */
export type StatsPropertiesWeightedStdev = number | null;

/**
 * Mean value of cells that intersect the polygon, weighted by the product over the coverage fraction and the weighting raster.
 */
export type StatsPropertiesWeightedMean = number | null;

/**
 * Fraction of covered cells that are occupied by each distinct raster value, weighted by the value of a second weighting raster.
 */
export type StatsPropertiesWeightedFrac = number[] | null;

/**
 * The number of distinct raster values in cells wholly or partially covered by the polygon.
 */
export type StatsPropertiesVariety = number | null;

/**
 * Population variance of cell values that intersect the polygon, taking into account coverage fraction.
 */
export type StatsPropertiesVariance = number | null;

export type StatsPropertiesUniqueAnyOfItem = number | number;

/**
 * Array of unique raster values for cells that intersect the polygon.
 */
export type StatsPropertiesUnique = StatsPropertiesUniqueAnyOfItem[] | null;

/**
 * Sum of values of raster cells that intersect the polygon, with each raster value weighted by its coverage fraction.
 */
export type StatsPropertiesSum = number | null;

/**
 * Population standard deviation of cell values that intersect the polygon, taking into account coverage fraction.
 */
export type StatsPropertiesStdev = number | null;

/**
 * The raster value occupying the least number of cells, taking into account cell coverage fractions but not weighting raster values.
 */
export type StatsPropertiesMinority = number | number | null;

/**
 * Cell center y-coordinate for the cell containing the minimum value intersected by the polygon. The center of this cell may or may not be inside the polygon.
 */
export type StatsPropertiesMinCenterY = number | null;

/**
 * Cell center x-coordinate for the cell containing the minimum value intersected by the polygon. The center of this cell may or may not be inside the polygon.
 */
export type StatsPropertiesMinCenterX = number | null;

/**
 * Minimum value of cells that intersect the polygon, not taking coverage fractions or weighting raster values into account.
 */
export type StatsPropertiesMin = number | number | null;

/**
 * Median value of cells that intersect the polygon, weighted by the percent of each cell that is covered.
 */
export type StatsPropertiesMedian = number | number | null;

/**
 * Mean value of cells that intersect the polygon, weighted by the percent of each cell that is covered.
 */
export type StatsPropertiesMean = number | null;

/**
 * Cell center y-coordinate for the cell containing the maximum value intersected by the polygon. The center of this cell may or may not be inside the polygon.
 */
export type StatsPropertiesMaxCenterY = number | null;

/**
 * Cell center x-coordinate for the cell containing the maximum value intersected by the polygon. The center of this cell may or may not be inside the polygon.
 */
export type StatsPropertiesMaxCenterX = number | null;

/**
 * Maximum value of cells that intersect the polygon, not taking coverage fractions or weighting raster values into account.
 */
export type StatsPropertiesMax = number | number | null;

/**
 * The raster value occupying the greatest number of cells, taking into account cell coverage fractions but not weighting raster values.
 */
export type StatsPropertiesMajority = number | number | null;

/**
 * Fraction of covered cells that are occupied by each distinct raster value.
 */
export type StatsPropertiesFrac = number[] | null;

/**
 * Array with coverage fraction of each cell that intersects the polygon.
 */
export type StatsPropertiesCoverage = number[] | null;

/**
 * Sum of all cell coverage fractions.
 */
export type StatsPropertiesCount = number | null;

/**
 * Population coefficient of variation of cell values that intersect the polygon, taking into account coverage fraction.
 */
export type StatsPropertiesCoefficientOfVariation = number | null;

/**
 * Array with cell center y-coordinate for each cell that intersects the polygon. Each cell center may or may not be inside the polygon.
 */
export type StatsPropertiesCenterY = number[] | null;

/**
 * Array with cell center x-coordinate for each cell that intersects the polygon. Each cell center may or may not be inside the polygon.
 */
export type StatsPropertiesCenterX = number[] | null;

/**
 * Array with 0-based index of each cell that intersects the polygon, increasing left-to-right.
 */
export type StatsPropertiesCellId = number[] | null;

/**
 * Model for `exact_extract` statistics results.

Deliberately avoids the `values` field since it is a
 list of all raster values for each cell that intersects the polygon.
 It is not included in the model because it can be very large and there are better ways to get this information
 in Titiler.
 */
export interface StatsProperties {
  /** Array with 0-based index of each cell that intersects the polygon, increasing left-to-right. */
  cell_id?: StatsPropertiesCellId;
  /** Array with cell center x-coordinate for each cell that intersects the polygon. Each cell center may or may not be inside the polygon. */
  center_x?: StatsPropertiesCenterX;
  /** Array with cell center y-coordinate for each cell that intersects the polygon. Each cell center may or may not be inside the polygon. */
  center_y?: StatsPropertiesCenterY;
  /** Population coefficient of variation of cell values that intersect the polygon, taking into account coverage fraction. */
  coefficient_of_variation?: StatsPropertiesCoefficientOfVariation;
  /** Sum of all cell coverage fractions. */
  count?: StatsPropertiesCount;
  /** Array with coverage fraction of each cell that intersects the polygon. */
  coverage?: StatsPropertiesCoverage;
  /** Fraction of covered cells that are occupied by each distinct raster value. */
  frac?: StatsPropertiesFrac;
  /** The raster value occupying the greatest number of cells, taking into account cell coverage fractions but not weighting raster values. */
  majority?: StatsPropertiesMajority;
  /** Maximum value of cells that intersect the polygon, not taking coverage fractions or weighting raster values into account. */
  max?: StatsPropertiesMax;
  /** Cell center x-coordinate for the cell containing the maximum value intersected by the polygon. The center of this cell may or may not be inside the polygon. */
  max_center_x?: StatsPropertiesMaxCenterX;
  /** Cell center y-coordinate for the cell containing the maximum value intersected by the polygon. The center of this cell may or may not be inside the polygon. */
  max_center_y?: StatsPropertiesMaxCenterY;
  /** Mean value of cells that intersect the polygon, weighted by the percent of each cell that is covered. */
  mean?: StatsPropertiesMean;
  /** Median value of cells that intersect the polygon, weighted by the percent of each cell that is covered. */
  median?: StatsPropertiesMedian;
  /** Minimum value of cells that intersect the polygon, not taking coverage fractions or weighting raster values into account. */
  min?: StatsPropertiesMin;
  /** Cell center x-coordinate for the cell containing the minimum value intersected by the polygon. The center of this cell may or may not be inside the polygon. */
  min_center_x?: StatsPropertiesMinCenterX;
  /** Cell center y-coordinate for the cell containing the minimum value intersected by the polygon. The center of this cell may or may not be inside the polygon. */
  min_center_y?: StatsPropertiesMinCenterY;
  /** The raster value occupying the least number of cells, taking into account cell coverage fractions but not weighting raster values. */
  minority?: StatsPropertiesMinority;
  /** Population standard deviation of cell values that intersect the polygon, taking into account coverage fraction. */
  stdev?: StatsPropertiesStdev;
  /** Sum of values of raster cells that intersect the polygon, with each raster value weighted by its coverage fraction. */
  sum?: StatsPropertiesSum;
  /** Array of unique raster values for cells that intersect the polygon. */
  unique?: StatsPropertiesUnique;
  /** Population variance of cell values that intersect the polygon, taking into account coverage fraction. */
  variance?: StatsPropertiesVariance;
  /** The number of distinct raster values in cells wholly or partially covered by the polygon. */
  variety?: StatsPropertiesVariety;
  /** Fraction of covered cells that are occupied by each distinct raster value, weighted by the value of a second weighting raster. */
  weighted_frac?: StatsPropertiesWeightedFrac;
  /** Mean value of cells that intersect the polygon, weighted by the product over the coverage fraction and the weighting raster. */
  weighted_mean?: StatsPropertiesWeightedMean;
  /** Weighted version of stdev. */
  weighted_stdev?: StatsPropertiesWeightedStdev;
  /** Sum of raster cells covered by the polygon, with each raster value weighted by its coverage fraction and weighting raster value. */
  weighted_sum?: StatsPropertiesWeightedSum;
  /** Weighted version of variance. */
  weighted_variance?: StatsPropertiesWeightedVariance;
  /** Array of weight values for each cell that intersects the polygon. */
  weights?: StatsPropertiesWeights;
}

/**
 * Statistic operations available in `exact_extract`. See `StatsProperties` for more details.
 */
export type StatsOps = (typeof StatsOps)[keyof typeof StatsOps];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatsOps = {
  cell_id: "cell_id",
  center_x: "center_x",
  center_y: "center_y",
  coefficient_of_variation: "coefficient_of_variation",
  count: "count",
  coverage: "coverage",
  frac: "frac",
  majority: "majority",
  max: "max",
  max_center_x: "max_center_x",
  max_center_y: "max_center_y",
  mean: "mean",
  median: "median",
  min: "min",
  min_center_x: "min_center_x",
  min_center_y: "min_center_y",
  minority: "minority",
  stdev: "stdev",
  sum: "sum",
  unique: "unique",
  variance: "variance",
  variety: "variety",
  weighted_frac: "weighted_frac",
  weighted_mean: "weighted_mean",
  weighted_stdev: "weighted_stdev",
  weighted_sum: "weighted_sum",
  weighted_variance: "weighted_variance",
  weights: "weights",
} as const;

/**
 * Exactextract result model for one feature.
 */
export interface StatsFeature {
  properties: StatsProperties;
  type: string;
}

/**
 * Exactextract result model for multiple features.
 */
export interface StatsFeatures {
  features: StatsFeature[];
}

export type PolygonCoordinatesItemItem = [number, number] | [number, number, number];

export type PolygonBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * Polygon Model
 */
export interface Polygon {
  bbox?: PolygonBbox;
  coordinates: PolygonCoordinatesItemItem[][];
  type: "Polygon";
}

/**
 * Point model.

response model for `/point` endpoints
 */
export interface PointOutput {
  band_names: string[];
  coordinates: number[];
  values: number[];
}

export type PointInputCoordinates = [number, number] | [number, number, number];

export type PointInputBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * Point Model
 */
export interface PointInput {
  bbox?: PointInputBbox;
  coordinates: PointInputCoordinates;
  type: "Point";
}

export type NumericalOperators = (typeof NumericalOperators)[keyof typeof NumericalOperators];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NumericalOperators = {
  eq: "eq",
  gt: "gt",
  lt: "lt",
  gte: "gte",
  lte: "lte",
  not_eq: "not_eq",
} as const;

export type NumericalLegendLegendType = "discrete" | "continuous";

/**
 * suggestion of color map to use
 */
export type NumericalLegendColormapName = string | null;

export interface NumericalLegend {
  /** suggestion of color map to use */
  colormap_name?: NumericalLegendColormapName;
  legend_type: NumericalLegendLegendType;
  stats: LevelStats[];
}

export interface NumericalFilter {
  /** Name of the column to which the filter will apply. */
  column_name: string;
  filter_type: "numerical";
  /** Operation to use in compare. */
  operation: NumericalOperators;
  /** Value to compare with. */
  value: number;
}

export type MultiPolygonCoordinatesItemItemItem = [number, number] | [number, number, number];

export type MultiPolygonBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiPolygon Model
 */
export interface MultiPolygon {
  bbox?: MultiPolygonBbox;
  coordinates: MultiPolygonCoordinatesItemItemItem[][][];
  type: "MultiPolygon";
}

export type MultiPointCoordinatesItem = [number, number] | [number, number, number];

export type MultiPointBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiPoint Model
 */
export interface MultiPoint {
  bbox?: MultiPointBbox;
  coordinates: MultiPointCoordinatesItem[];
  type: "MultiPoint";
}

export type MultiLineStringCoordinatesItemItem = [number, number] | [number, number, number];

export type MultiLineStringBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiLineString Model
 */
export interface MultiLineString {
  bbox?: MultiLineStringBbox;
  coordinates: MultiLineStringCoordinatesItemItem[][];
  type: "MultiLineString";
}

export type LineStringCoordinatesItem = [number, number] | [number, number, number];

export type LineStringBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * LineString Model
 */
export interface LineString {
  bbox?: LineStringBbox;
  /** @minItems 2 */
  coordinates: LineStringCoordinatesItem[];
  type: "LineString";
}

/**
 * null value represents -infinity
 */
export type LevelStatsMin = number | number | null;

/**
 * null value represents infinity
 */
export type LevelStatsMax = number | number | null;

export interface LevelStats {
  /**
   * Stats for this level. AKA Overview or zoom level in other applications
   * @minimum 0
   * @maximum 15
   */
  level: number;
  /** null value represents infinity */
  max: LevelStatsMax;
  /** null value represents -infinity */
  min: LevelStatsMin;
}

/**
 * Available Output image type.
 */
export type ImageType = (typeof ImageType)[keyof typeof ImageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageType = {
  png: "png",
  npy: "npy",
  tif: "tif",
  jpeg: "jpeg",
  jpg: "jpg",
  jp2: "jp2",
  webp: "webp",
  pngraw: "pngraw",
} as const;

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface H3GridInfo {
  h3_cells_count: number;
  /**
   * @minimum 0
   * @maximum 15
   */
  h3_cells_resolution: number;
  /**
   * @minimum 0
   * @maximum 15
   */
  level: number;
}

export interface MultiDatasetMeta {
  /** Variables represented in this dataset. */
  datasets: DatasetMeta[];
  /** H3 related information. */
  h3_grid_info: H3GridInfo[];
}

export type GeometryCollectionGeometriesItem =
  | PointInput
  | MultiPoint
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygon
  | GeometryCollection;

export type GeometryCollectionBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * GeometryCollection Model
 */
export interface GeometryCollection {
  bbox?: GeometryCollectionBbox;
  geometries: GeometryCollectionGeometriesItem[];
  type: "GeometryCollection";
}

export type FeatureCollectionBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * FeatureCollection Model
 */
export interface FeatureCollection {
  bbox?: FeatureCollectionBbox;
  features: Feature[];
  type: "FeatureCollection";
}

export type FeaturePropertiesAnyOf = { [key: string]: any };

export type FeatureProperties = FeaturePropertiesAnyOf | BaseModel | null;

export type FeatureId = number | string | null;

export type FeatureGeometryAnyOf =
  | PointInput
  | MultiPoint
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygon
  | GeometryCollection;

export type FeatureGeometry = FeatureGeometryAnyOf | null;

export type FeatureBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * Feature Model
 */
export interface Feature {
  bbox?: FeatureBbox;
  geometry: FeatureGeometry;
  id?: FeatureId;
  properties: FeatureProperties;
  type: "Feature";
}

/**
 * Unit of the measurement
 */
export type DatasetMetaUnit = string | null;

/**
 * Nodata value used in grid
 */
export type DatasetMetaNodata = string | null;

/**
 * Source data used to compute this dataset.
 */
export type DatasetMetaLineage = string[] | null;

export interface DatasetMeta {
  /** Human readable indicator description. */
  description: string;
  /** Human readable name. */
  label: string;
  legend: DatasetMetaLegend;
  /** Source data used to compute this dataset. */
  lineage?: DatasetMetaLineage;
  /** Nodata value used in grid */
  nodata?: DatasetMetaNodata;
  /** Unit of the measurement */
  unit: DatasetMetaUnit;
  /** Column dtype. */
  var_dtype: string;
  /** Column name. */
  var_name: string;
}

export type CategoricalOperators = (typeof CategoricalOperators)[keyof typeof CategoricalOperators];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoricalOperators = {
  in: "in",
  not_in: "not_in",
} as const;

export type CategoricalLegendEntryValue = number | string;

export interface CategoricalLegendEntry {
  color: string;
  /** human readable label */
  label: string;
  value: CategoricalLegendEntryValue;
}

export interface CategoricalLegend {
  entries: CategoricalLegendEntry[];
  legend_type: "categorical";
}

export type DatasetMetaLegend = CategoricalLegend | NumericalLegend;

export interface CategoricalFilter {
  /** Name of the column to which the filter will apply. */
  column_name: string;
  filter_type: "categorical";
  operation: CategoricalOperators;
  /** Value to compare with. */
  value: number[];
}

export interface BaseModel {
  [key: string]: any;
}
